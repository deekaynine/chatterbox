{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matthew\\\\Desktop\\\\realtime chat\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSearchParams, useLocation } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport { io } from \"socket.io-client\";\nimport \"./Chat.css\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\nimport Messages from \"../Messages/Messages\";\nimport TextContainer from \"../TextContainer/TextContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Chat = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const current_path = useLocation();\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(current_path.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    console.log(socket);\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, current_path]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    });\n    socket.on(\"roomData\", _ref => {\n      let {\n        users\n      } = _ref;\n      setUsers(users);\n    });\n  }, [messages]);\n\n  const sendMessage = e => {\n    e.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"hrJa6CMIVcSXOpQ8qpfPGKi/OuA=\", false, function () {\n  return [useLocation];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Matthew/Desktop/realtime chat/client/src/components/Chat/Chat.jsx"],"names":["React","useState","useEffect","useSearchParams","useLocation","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","current_path","ENDPOINT","parse","search","console","log","emit","off","on","sendMessage","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,YAAP;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMsB,YAAY,GAAGnB,WAAW,EAAhC;AACA,QAAMoB,QAAQ,GAAG,gBAAjB;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEW,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBV,WAAW,CAACoB,KAAZ,CAAkBF,YAAY,CAACG,MAA/B,CAAvB;AAEAf,IAAAA,MAAM,GAAGL,EAAE,CAACkB,QAAD,CAAX;AAEAV,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAY,IAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AAEAA,IAAAA,MAAM,CAACkB,IAAP,CAAY,MAAZ,EAAoB;AAAEhB,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CAAE,CAA5C;AAEA,WAAO,MAAM;AACXJ,MAAAA,MAAM,CAACkB,IAAP,CAAY,YAAZ;AAEAlB,MAAAA,MAAM,CAACmB,GAAP;AACD,KAJD;AAKD,GAjBQ,EAiBN,CAACN,QAAD,EAAWD,YAAX,CAjBM,CAAT;AAmBArB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,MAAM,CAACoB,EAAP,CAAU,SAAV,EAAsBZ,OAAD,IAAa;AAChCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,KAFD;AAIAR,IAAAA,MAAM,CAACoB,EAAP,CAAU,UAAV,EAAsB,QAAe;AAAA,UAAd;AAAEd,QAAAA;AAAF,OAAc;AACnCC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAFD;AAGD,GARQ,EAQN,CAACI,QAAD,CARM,CAAT;;AAUA,QAAMW,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAIf,OAAJ,EAAa;AACXR,MAAAA,MAAM,CAACkB,IAAP,CAAY,aAAZ,EAA2BV,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACD;AACF,GAND;;AAQAO,EAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,EAAqBE,QAArB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEN;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEM,QAApB;AAA8B,QAAA,IAAI,EAAER;AAApC;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,KAAD;AACE,QAAA,OAAO,EAAEM,OADX;AAEE,QAAA,UAAU,EAAEC,UAFd;AAGE,QAAA,WAAW,EAAEY;AAHf;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEf;AAAtB;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA9DD;;GAAML,I;UAMiBR,W;;;KANjBQ,I;AAgEN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSearchParams, useLocation } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nimport \"./Chat.css\";\r\n\r\nimport InfoBar from \"../InfoBar/InfoBar\";\r\nimport Input from \"../Input/Input\";\r\nimport Messages from \"../Messages/Messages\";\r\nimport TextContainer from \"../TextContainer/TextContainer\";\r\n\r\nlet socket;\r\n\r\nconst Chat = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [users, setUsers] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const current_path = useLocation();\r\n  const ENDPOINT = \"localhost:5000\";\r\n\r\n  useEffect(() => {\r\n    const { name, room } = queryString.parse(current_path.search);\r\n\r\n    socket = io(ENDPOINT);\r\n\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    console.log(socket);\r\n\r\n    socket.emit(\"join\", { name, room }, () => {});\r\n\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n\r\n      socket.off();\r\n    };\r\n  }, [ENDPOINT, current_path]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      setMessages([...messages, message]);\r\n    });\r\n\r\n    socket.on(\"roomData\", ({ users }) => {\r\n      setUsers(users);\r\n    });\r\n  }, [messages]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (message) {\r\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\r\n    }\r\n  };\r\n\r\n  console.log(message, messages);\r\n\r\n  return (\r\n    <div className=\"outerContainer\">\r\n      <div className=\"container\">\r\n        <InfoBar room={room} />\r\n        <Messages messages={messages} name={name} />\r\n        <Input\r\n          message={message}\r\n          setMessage={setMessage}\r\n          sendMessage={sendMessage}\r\n        />\r\n      </div>\r\n      <TextContainer users={users} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}